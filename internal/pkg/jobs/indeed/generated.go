package indeed

// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// SearchJobsJobSearchJobSearchPayload includes the requested fields of the GraphQL type JobSearchPayload.
type SearchJobsJobSearchJobSearchPayload struct {
	PageInfo SearchJobsJobSearchJobSearchPayloadPageInfo `json:"pageInfo"`
	// Reports the total number of matched results. This count is an estimate as precise counts are unavailable and may
	// change due to user personalization.
	EstimatedTotalResultsCount int                                                         `json:"estimatedTotalResultsCount"`
	Results                    []SearchJobsJobSearchJobSearchPayloadResultsJobSearchResult `json:"results"`
}

// SearchJobsJobSearchJobSearchPayloadPageInfo includes the requested fields of the GraphQL type JobSearchPayloadPageInfo.
type SearchJobsJobSearchJobSearchPayloadPageInfo struct {
	NextPages []SearchJobsJobSearchJobSearchPayloadPageInfoNextPagesJobSearchPayloadSinglePageInfo `json:"nextPages"`
}

// SearchJobsJobSearchJobSearchPayloadPageInfoNextPagesJobSearchPayloadSinglePageInfo includes the requested fields of the GraphQL type JobSearchPayloadSinglePageInfo.
type SearchJobsJobSearchJobSearchPayloadPageInfoNextPagesJobSearchPayloadSinglePageInfo struct {
	Cursor string `json:"cursor"`
	// 0 based page number (i.e., pageNum is 0 for the first page)
	PageNum int `json:"pageNum"`
}

// SearchJobsJobSearchJobSearchPayloadResultsJobSearchResult includes the requested fields of the GraphQL type JobSearchResult.
type SearchJobsJobSearchJobSearchPayloadResultsJobSearchResult struct {
	Job SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJob `json:"job"`
}

// SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJob includes the requested fields of the GraphQL type Job.
type SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJob struct {
	Title    string                                                               `json:"title"`
	Key      string                                                               `json:"key"`
	Expired  bool                                                                 `json:"expired"`
	Url      string                                                               `json:"url"`
	Employer SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobEmployer `json:"employer"`
	Location SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobLocation `json:"location"`
	// **Example:**
	//
	// Get attributes for job types or remote as a separate field
	//
	// ```
	// jobTypes: attributes ( keys: ["DSQF7"] customClass: "BM62A" ) {
	// key
	// label
	// }
	// ```
	Attributes  []SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobAttributesJobAttribute   `json:"attributes"`
	Occupations []SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobOccupationsJobOccupation `json:"occupations"`
}

// SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobAttributesJobAttribute includes the requested fields of the GraphQL type JobAttribute.
// The GraphQL type's documentation follows.
//
// A skill, experience, certification, benefit, work environment, work type, or other distinguishing characteristic of a job or jobseeker.
//
// Reference: [Indeed Attributes](https://wiki.indeed.com/display/MetadataTaxonomy/Indeed+Attributes)
type SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobAttributesJobAttribute struct {
	// Localized label to explain attribute
	Label string `json:"label"`
	// [SUID](https://wiki.indeed.com/display/MetadataTaxonomy/Glossary+and+Terminology#GlossaryandTerminology-SUID) of attribute
	Key string `json:"key"`
}

// SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobEmployer includes the requested fields of the GraphQL type Employer.
type SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobEmployer struct {
	// Company name (calculated based on locale)
	Name string `json:"name"`
}

// SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobLocation includes the requested fields of the GraphQL type JobLocation.
// The GraphQL type's documentation follows.
//
// Represents the location of the Job
//
// It is advised to leverage the FormattedJobLocation fields for display purposes.
type SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobLocation struct {
	// Typically represents a city; however, in some markets like Japan may represent a station or district name.
	//
	// Examples:
	// - US - 'Bellingham'
	// - JP - '新宿駅' (Station) '赤坂' (District)
	// - GB - 'Birkenhead'
	// - AU - 'Brisbane'
	City string `json:"city"`
	// Country code for which the job is located. Format: ISO 3166-1 alpha-2 (Example: "CA")
	CountryCode string `json:"countryCode"`
}

// SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobOccupationsJobOccupation includes the requested fields of the GraphQL type JobOccupation.
// The GraphQL type's documentation follows.
//
// A conceptual representation of a group of jobs that share similar characteristics.
type SearchJobsJobSearchJobSearchPayloadResultsJobSearchResultJobOccupationsJobOccupation struct {
	// Localized label to explain occupation
	Label string `json:"label"`
	// [SUID](https://wiki.indeed.com/display/MetadataTaxonomy/Glossary+and+Terminology#GlossaryandTerminology-SUID) of occupation
	Key string `json:"key"`
}

// SearchJobsResponse is returned by SearchJobs on success.
type SearchJobsResponse struct {
	// Search for jobs
	//
	// _Count Only Requests:_
	// To execute "count" only request, either specify a `limit` of 0 or do not request the `JobSearchPayload.results`
	//
	// _HTTP Headers:_
	//
	// - **indeed-ctk** : Used for personalizing search results (e.g., ranking and matching)
	// - **indeed-prforce-groups** : Used to force proctor groups for JobRetrievalService and JobSearchService requests. Format: [Forcing Groups](https://opensource.indeedeng.io/proctor/docs/using-groups/#forcing-groups)
	// - **indeed-fed-client-roles** : Used to present the roles of the client. This is a multi-value header. Currently, the following roles are supported:
	// - _**allow-job-search-metadata**_ - Allow the client to include job search metadata in the results. This role is the prerequisite for the `metadata` field in the `JobSearchPayload`.
	// - _**allow-sponsored-jobs**_ - Allow the client to include sponsored jobs in the results. This role is the prerequisite for using the 'includeSponsoredResults' field in the jobSearch query.
	// - _**allow-glassdoor-data**_ - Allow the client to access Glassdoor filters, facets in jobSearch and glassdoor field in jobData.
	// - **indeed-fed-client-flags** : Used for enabling client-specific behavior. This is a multi-value header. Currently, the following flags are supported:
	// - _**return-sponsored-jobs-as-organic**_ - Handle sponsored jobs as if they are organic. Any sponsored-specific logic such as auction is skipped. The 'allow-sponsored-jobs' client role is ignored.
	//
	//
	// _URL Parameters:_
	//
	// - **co** : Target country for search. Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) (Example: "CA")
	// - **locale** : Used for localizing response data. Format: [BCP 47 language tag](https://tools.ietf.org/html/bcp47). Language portion can influence search matching (Example: "en-US")
	JobSearch SearchJobsJobSearchJobSearchPayload `json:"jobSearch"`
}

// __SearchJobsInput is used internally by genqlient
type __SearchJobsInput struct {
	Cursor         *string    `json:"cursor"`
	LastSearchTime *time.Time `json:"lastSearchTime"`
}

// .graphqlconfig=/Users/donalbyrne/code/lc/giggly/internal/pkg/agents/indeed!
func SearchJobs(
	ctx context.Context,
	client graphql.Client,
	cursor *string,
	lastSearchTime *time.Time,
) (*SearchJobsResponse, error) {
	__input := __SearchJobsInput{
		Cursor:         cursor,
		LastSearchTime: lastSearchTime,
	}
	var err error

	var retval SearchJobsResponse
	err = client.MakeRequest(
		ctx,
		"SearchJobs",
		`
query SearchJobs ($cursor: String, $lastSearchTime: Timestamp) {
	jobSearch(cursor: $cursor, limit: 100, what: "kommunikatör", location: {where:"56.6499, 16.46859",radius:30,radiusUnit:KILOMETERS}, lastSearchTime: $lastSearchTime, filters: [{keyword:{field:"occupations",keys:["NPKCD","SZ69B"],operation:OR,match:MUST_NOT}},{keyword:{field:"location.city",keys:["Nybro"],operation:OR,match:MUST_NOT}},{keyword:{field:"attributes",keys:["4CXY6","VDTG7","75GKK","8GGC3","QSU24","SUDVY","KYZ6U","RY9MK","CJWTS"],operation:OR,match:MUST_NOT}}]) {
		pageInfo {
			nextPages {
				cursor
				pageNum
			}
		}
		estimatedTotalResultsCount
		results {
			job {
				title
				key
				expired
				url
				employer {
					name
				}
				location {
					city
					countryCode
				}
				attributes {
					label
					key
				}
				occupations {
					label
					key
				}
			}
		}
	}
}
`,
		&retval,
		&__input,
	)
	return &retval, err
}
